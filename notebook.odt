Dilemma 1: Designproblem – vilken layout ska användas?:
	- SpringLayout – mer flexibilitet, svårare att hantera.
	- GridBagLayout – mindre flexibilitet, lättare att använda.
	- MigLayout – finns i föreläsningsanteckningar.
valde MigLayout för det finns I föreläsningsanteckningar

Dilemma 2: Skapa en basframe eller skapa 5000000 actions och mappa? (popup)
	-Basframe - mindre arbete, svårare implementation
	-Många actions – mer arbete, lättare implementation
Valde Basframe, mer optimerat, färre rader kod.

Dilemma 3 (Yousef): Låt User klassen hantera listorna eller skapa en UserList (typ som i tetris)?
	- UserList hanterar listan – mer arbete, finare struktur, kan hantera allt med listan
	- User hanterar listan – Listan hanteras direkt där klassen skapas, men inte lika klart var allt görs.

Valde UserList eftersom jag föredrar att ha allt på sin plats och inte två saker på samma plats.

Dilemma 4 (Yousef): Utility class för alla actions eller ha med dom I calendarframe.
	-Utility class är lättare att se vad som pågår
	-Calendarframe har inte någon riktig fördel, bara att allt finns på samma ställe.

Valde att behålla allting I Calendarframe eftersom alla actions beror på komponenter i framen




By marking a class as final you disable a powerful and flexible feature of the language for that part of the code. Some classes however, should not (and in certain cases can not) be designed to take subclassing into account in a good way. In these cases it makes sense to mark the class as final, even though it limits OOP. (Remember however that a final class can still extend another non-final class.)
